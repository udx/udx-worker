name: Release UDX Worker

on:
  push:
    branches:
      - latest

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      ACR_REPO: udxmarketplace.azurecr.io
      FORCE: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate .udx file
        run: |
          echo "AZURE_SUBSCRIPTION_ID=${{ vars.AZURE_SUBSCRIPTION_ID }}" > .udx
          echo "AZURE_TENANT_ID=${{ vars.AZURE_TENANT_ID }}" >> .udx
          echo "AZURE_APPLICATION_ID=${{ vars.AZURE_APPLICATION_ID }}" >> .udx
          echo "AZURE_APPLICATION_PASSWORD=${{ secrets.AZURE_APPLICATION_PASSWORD }}" >> .udx

      - name: Run Development Pipeline
        run: make dev-pipeline FORCE=true DEBUG=false          
        working-directory: .

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v2
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v2
        with:
          useConfigFile: true
          configFilePath: ci/git-version.yml

      - name: Authenticate to Google Cloud
        id: google_auth
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ vars.GCP_AUTH_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Delete previous "latest" image from Google Artifact Registry
        run: |
          IMAGE_NAME="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}"
          IMAGE_TAG="latest"
          IMAGE_DIGEST=$(gcloud container images list-tags ${IMAGE_NAME} --filter="tags:${IMAGE_TAG}" --format='get(digest)')
          if [ -n "$IMAGE_DIGEST" ]; then
            gcloud container images delete "${IMAGE_NAME}@${IMAGE_DIGEST}" --quiet --force-delete-tags
          else
            echo "Image with tag 'latest' does not exist. Skipping delete."
          fi

      - name: Docker Login to Google Artifact Registry
        run: docker login -u oauth2accesstoken -p "${{ steps.google_auth.outputs.access_token }}" ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build and push to Google Artifact Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ steps.gitversion.outputs.semVer }}
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}:latest

      - name: Generate AZURE_CREDENTIALS from .udx
        id: generate_azure_credentials
        run: |
          AZURE_SUBSCRIPTION_ID=$(grep AZURE_SUBSCRIPTION_ID .udx | cut -d '=' -f2)
          AZURE_TENANT_ID=$(grep AZURE_TENANT_ID .udx | cut -d '=' -f2)
          AZURE_APPLICATION_ID=$(grep AZURE_APPLICATION_ID .udx | cut -d '=' -f2)
          AZURE_APPLICATION_PASSWORD=$(grep AZURE_APPLICATION_PASSWORD .udx | cut -d '=' -f2)

          AZURE_CREDENTIALS=$(jq -n --arg clientId "$AZURE_APPLICATION_ID" --arg clientSecret "$AZURE_APPLICATION_PASSWORD" --arg subscriptionId "$AZURE_SUBSCRIPTION_ID" --arg tenantId "$AZURE_TENANT_ID" \
          '{
            clientId: $clientId,
            clientSecret: $clientSecret,
            subscriptionId: $subscriptionId,
            tenantId: $tenantId,
            activeDirectoryEndpointUrl: "https://login.microsoftonline.com",
            resourceManagerEndpointUrl: "https://management.azure.com/",
            activeDirectoryGraphResourceId: "https://graph.windows.net/",
            sqlManagementEndpointUrl: "https://management.core.windows.net:8443/",
            galleryEndpointUrl: "https://gallery.azure.com/",
            managementEndpointUrl: "https://management.core.windows.net/"
          }')
          echo "AZURE_CREDENTIALS=$AZURE_CREDENTIALS" >> $GITHUB_ENV
    
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}     
          
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_REPO }}          

      - name: Delete previous "latest" image from Azure Container Registry
        run: |
          IMAGE_NAME="${{ env.ACR_REPO }}/udx-worker"
          IMAGE_TAG="latest"
          IMAGE_DIGEST=$(az acr repository show-tags --name ${{ env.ACR_REPO }} --repository udx-worker --filter "tag eq '$IMAGE_TAG'" --output tsv --query '[0]')
          if [ -n "$IMAGE_DIGEST" ]; then
            az acr repository delete --name ${{ env.ACR_REPO }} --image "${IMAGE_NAME}:latest" --yes
          else
            echo "Image with tag 'latest' does not exist. Skipping delete."
          fi

      - name: Build and push to Azure Container Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_REPO }}/udx-worker:${{ steps.gitversion.outputs.semVer }}
            ${{ env.ACR_REPO }}/udx-worker:latest

      - name: Clean up AZURE_CREDENTIALS
        run: |
          echo "AZURE_CREDENTIALS=" >> $GITHUB_ENV                 

      - name: Generate changelog
        id: changelog
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD -- . --pretty=format:"- %s" > changelog.txt
          echo "::set-output name=changelog::$(cat changelog.txt)"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: Release v${{ steps.gitversion.outputs.semVer }}
          body: |
            Release Notes:
            ${{ steps.changelog.outputs.changelog }}
