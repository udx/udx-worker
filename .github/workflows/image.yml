## Continuous Integration (CI) Pipeline for Docker Image Management
##
## Overview:
## ---------
##
## This CI pipeline is designed to build and push Docker images to the Google Artifact Registry.
## It is triggered on every push to any branch.
## However, only pushes to the "release" (latest) branch result in the building and pushing of the image.
## For all other branches, the pipeline only performs a test build.
##
## The pipeline uses repository variables to store all necessary information.
## Access to Google Cloud is granted using a service account and workload identity provider.
## The images that are published are tagged with the version from GitVersion.
## The pipeline also tags the new version as "latest", deletes the previous "latest" image, and creates a GitHub release with the changelog.
##
## The changelog is automatically generated from the commit messages between the last tag and HEAD.
## GitVersion is configured in ci/git-version.yml, ensuring the use of "ContinuousDeployment" versioning mode and branching strategy
## (release: "latest", development: "!latest").
##
## Required Repository Variables:
## ------------------------------
## - GCP_PROJECT: Google Cloud project ID
## - GCP_REGION: Google Cloud region
## - GCP_REGISTRY_REPO: Google Artifact Registry repository name
## - GCP_AUTH_PROVIDER: Google Cloud Workload Identity Provider
## - GCP_SERVICE_ACCOUNT: Google Cloud service account name
## - DOCKER_IMAGE_NAME: Docker image name
##
## References:
## -----------
##
## - Google Cloud Workload Identity: https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
## - GitTools actions: https://github.com/GitTools/actions
## - Google GitHub Actions: https://github.com/google-github-actions
## - Google Cloud SDK: https://cloud.google.com/sdk
## - Google Artifact Registry: https://cloud.google.com/artifact-registry
## - Docker: https://docs.docker.com/engine/reference/commandline/build/
## - GitVersion: https://gitversion.net/docs/
##

name: Build Image

on:
  push:
    paths:
      - "image/**"
      - ".github/workflows/image.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      RELEASE_BRANCH_REF: refs/heads/latest
      IMAGE_CONTEXT: image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build
        if: success() && github.ref != env.RELEASE_BRANCH_REF
        run: docker build ${{env.IMAGE_CONTEXT}}

      - name: Install GitVersion
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true
          configFilePath: ci/git-version.yml

      - name: Authenticate to Google Cloud
        id: google_auth
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ vars.GCP_AUTH_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Delete previous "latest" image
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: |
          IMAGE_NAME="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}"
          IMAGE_TAG="latest"
          IMAGE_DIGEST=$(gcloud container images list-tags ${IMAGE_NAME} --filter="tags:${IMAGE_TAG}" --format='get(digest)')
          if [ -n "$IMAGE_DIGEST" ]; then
            gcloud container images delete "${IMAGE_NAME}@${IMAGE_DIGEST}" --quiet --force-delete-tags
          else
            echo "Image with tag 'latest' does not exist. Skipping delete."
          fi

      - name: Docker Login
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: docker login -u oauth2accesstoken -p "${{ steps.google_auth.outputs.access_token }}" ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build and push
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ${{env.IMAGE_CONTEXT}}
          push: true
          tags: |
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ steps.gitversion.outputs.semVer }}
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT }}/${{ vars.GCP_REGISTRY_REPO }}/${{ vars.DOCKER_IMAGE_NAME }}:latest

      - name: Generate changelog
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: changelog
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD -- ./${IMAGE_CONTEXT} --pretty=format:"- %s" > changelog.txt
          echo "::set-output name=changelog::$(cat changelog.txt)"

      - name: Create GitHub release
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: Release v${{ steps.gitversion.outputs.semVer }}
          body: |
            Release Notes:
            ${{ steps.changelog.outputs.changelog }}
