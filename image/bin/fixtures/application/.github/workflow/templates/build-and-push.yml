name: Build

on:
  workflow_call:
    inputs:
      command:
        required: false
        type: string
        default: "npm test"
      image:
        required: false
        type: string
        default: "udx-worker:latest"
      volumes:
        required: false
        type: string
      gcp_project:
        required: true
        type: string
      gcp_region:
        required: true
        type: string
      gcp_registry_repo:
        required: true
        type: string
      gcp_auth_provider:
        required: true
        type: string
      gcp_service_account:
        required: true
        type: string
      docker_image_name:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      RELEASE_BRANCH_REF: refs/heads/latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for non-default worker
        run: |
          if ! echo '${{ fromJSON(env.DEFAULT_IMAGES) }}' | grep -q "${{ inputs.image }}"; then
            echo "Warning: Using a non-default udx-worker may cause compatibility issues."
          else
            echo "Using the default udx-worker."

            if [[ "${{ inputs.image }}" != *":latest" ]]; then
              echo "Warning: Using a non-latest version of the udx-worker is not recommended."
            fi
          fi

      - name: Check for missing volumes
        run: |
          if [[ -z "${{ inputs.volumes }}" ]]; then
            echo "Warning: No volumes specified. Consider adding volumes for your use case."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build
        if: success() && github.ref != env.RELEASE_BRANCH_REF
        run: docker build ./docker-image

      - name: Install GitVersion
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true
          configFilePath: ci/git-version.yml

      - name: Authenticate to Google Cloud
        id: google_auth
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.gcp_auth_provider }}
          service_account: ${{ inputs.gcp_service_account }}

      - name: Set up Google Cloud SDK
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: gcloud auth configure-docker ${{ inputs.gcp_region }}-docker.pkg.dev

      - name: Delete previous "latest" image
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: |
          IMAGE_NAME="${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project }}/${{ inputs.gcp_registry_repo }}/${{ inputs.docker_image_name }}"
          IMAGE_TAG="latest"
          IMAGE_DIGEST=$(gcloud container images list-tags ${IMAGE_NAME} --filter="tags:${IMAGE_TAG}" --format='get(digest)')
          if [ -n "$IMAGE_DIGEST" ]; then
            gcloud container images delete "${IMAGE_NAME}@${IMAGE_DIGEST}" --quiet --force-delete-tags
          else
            echo "Image with tag 'latest' does not exist. Skipping delete."
          fi

      - name: Docker Login
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        run: docker login -u oauth2accesstoken -p "${{ steps.google_auth.outputs.access_token }}" ${{ inputs.gcp_region }}-docker.pkg.dev

      - name: Build and Test
        if: success() && github.ref != env.RELEASE_BRANCH_REF
        id: docker_build_test
        uses: docker/build-push-action@v5
        with:
          context: ./docker-image
          push: false
          tags: ${{ inputs.docker_image_name }}:test
          load: true
        run: |
          volumes=${{ inputs.volumes }}
          volumes=${volumes//,/ }
          docker run $volumes ${{ inputs.image }}:test ${{ inputs.command }}

      - name: Build and push
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./docker-image
          push: true
          tags: |
            ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project }}/${{ inputs.gcp_registry_repo }}/${{ inputs.docker_image_name }}:${{ steps.gitversion.outputs.semVer }}
            ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project }}/${{ inputs.gcp_registry_repo }}/${{ inputs.docker_image_name }}:latest

      - name: Cleanup Images
        run: |
          docker rmi ${{ inputs.docker_image_name }}:test || true
          docker rmi ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project }}/${{ inputs.gcp_registry_repo }}/${{ inputs.docker_image_name }}:${{ steps.gitversion.outputs.semVer }} || true
          docker rmi ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project }}/${{ inputs.gcp_registry_repo }}/${{ inputs.docker_image_name }}:latest || true

      - name: Generate changelog
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        id: changelog
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" > changelog.txt
          echo "::set-output-file name=changelog::changelog.txt"

      - name: Create GitHub release
        if: success() && github.ref == env.RELEASE_BRANCH_REF
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: Release v${{ steps.gitversion.outputs.semVer }}
          body: |
            Release Notes:
            ${{ steps.changelog.outputs.changelog }}
